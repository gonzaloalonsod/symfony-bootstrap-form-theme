{#
  Bootstrap 4 Symfony form layout
  =======================================
  Massimo Cassandro
  https://github.com/massimo-cassandro/symfony-bootstrap-form-theme
#}

{#

TODO:
boostrap validation markup
custom validity
grouped checkboxes

range
file
number, date, datetime, money, time
dateinterval
Switches
input groups
progress?
buttons?
#}

{#
  estende il template form base:
  `/vendor/symfony/symfony/src/Symfony/Bridge/Twig/Resources/views/Form/form_div_layout.html.twig`
#}
{% use "form_div_layout.html.twig" %}

{# base #}
{% block form_widget_simple -%}
  {% if type is not defined or type != 'hidden' %}
    {%- set attr = attr|merge({class: (attr.class|default('') ~ ' form-control' ~ (type|default('') == 'file' ? '-file' : ''))|trim}) -%}
  {% endif %}
  {%- if type is defined and (type == 'range' or type == 'color') %}
    {# Attribute "required" is not supported #}
    {%- set required = false -%}
  {% endif %}
  {{- parent() -}}
{%- endblock form_widget_simple %}

{%- block widget_attributes -%}
  {%- if not valid %}
    {% set attr = attr|merge({class: (attr.class|default('') ~ ' is-invalid')|trim}) %}
  {% endif -%}
  {{ parent() }}
{%- endblock widget_attributes -%}


{% block form_label -%}

  {% if label is not same as(false) -%}
    {%- if compound is defined and compound -%}
      {%- set element = 'legend' -%}
      {%- set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' label')|trim}) -%}
    {%- else -%}
      {%- set label_attr = label_attr|merge({for: id}) -%}
    {%- endif -%}

 {#    {% if required -%}
      {% set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' required')|trim}) %}
    {%- endif -%} #}

    {% if label is empty -%}
      {%- if label_format is not empty -%}
        {% set label = label_format|replace({
          '%name%': name,
          '%id%': id,
        }) %}
      {%- else -%}
        {% set label = name|humanize %}
      {%- endif -%}
    {%- endif -%}
    <{{ element|default('label') }}{% if label_attr %}{% with { attr: label_attr } %}{{ block('attributes') }}{% endwith %}{% endif %}>
      {{ translation_domain is same as(false) ? label : label|trans({}, translation_domain) }}{% block form_label_errors %}{{- form_errors(form) -}}{% endblock form_label_errors %}
    </{{ element|default('label') }}>
  {%- else -%}
    {%- if errors|length > 0 -%}
    <div id="{{ id }}_errors" class="mb-2">
      {{- form_errors(form) -}}
    </div>
    {%- endif -%}
  {%- endif -%}
{%- endblock form_label %}

{# Rows #}
{% block containers_classes -%}
  {%- if disabled is defined and disabled %} disabled{%- endif -%}
  {%- if required is defined and required %} required{%- endif -%}
{%- endblock containers_classes %}

{% block form_container_start -%}
  <{{ element|default('div') }} class="form-group {{- block('containers_classes') -}}">
{%- endblock form_container_start %}

{% block form_container_end -%}
  {%- if help is defined and help|trim and not compound -%}
    <div class="form-help-text">{{ help|raw }}</div>
  {%- endif -%}
  </{{ element|default('div') }}>
{%- endblock form_container_end %}

{% block form_row -%}
  {% set params = {
      container: true,
      collection_container: true
    }|merge(params|default({}))
  %}

  {%- if compound is defined and compound and params.collection_container -%}
    {%- set element = 'fieldset' -%}
  {%- endif -%}

  {%- if params.container == true and params.collection_container == true -%}
    {{- block('form_container_start') -}}
    {{- form_label(form) -}}
    {%- if help is defined and help|trim and compound -%}
      <div class="form-help-text form-help-top">{{ help|raw }}</div>
    {%- endif -%}
  {% endif %}

   {{- form_widget(form) -}}

  {%- if params.container == true and params.collection_container == true -%}
    {{- block('form_container_end') -}}
  {%- endif -%}

{%- endblock form_row %}

{# checkboxes and radios #}
{% block checkbox_widget -%}
  {{ parent() }}
{%- endblock checkbox_widget %}
{% block radio_widget -%}
  {{ parent() }}
{%- endblock radio_widget %}

{% block checkbox_radio_row -%}

  {% set params = {
    container: true,
    collection_container: true,
    bs_custom_control: false,
    top_label: false,
    inline: false
  }|merge(params|default({})) %}

  {# the `top_label` option requires the container #}
  {% if params.top_label %}
    {% set params = params|merge({container: true}) %}
  {% endif %}

  {%- if params.bs_custom_control -%}
    {%- set attr = attr|merge({class: (attr.class|default('') ~ ' custom-control-input')|trim}) -%}
    <div class="custom-control custom-checkbox{{ params.inline ? ' custom-control-inline' }}">
      {{- block('checkbox_widget') -}}
      {{- form_label(form, null, {label_attr: {class:'custom-control-label' ~ (disabled|default()? ' disabled' :'') }}) -}}
      {% if required %}
        <span class="required"></span>
      {% endif %}
    </div>
  {%- else -%}
    {% if params.container %}
      {{ block('form_container_start') }}
    {% endif %}

    {% if params.top_label %}
      {%- set attr = attr|merge({class: (attr.class|default('') ~ ' d-block')|trim}) -%}
      {{- form_label(form) -}}
        {{- block( element ~ '_widget') -}}
    {% else %}
      {%- set attr = attr|merge({class: (attr.class|default('') ~ ' form-check-input')|trim}) -%}
      <div class="form-check
        {%- if params.inline %} form-check-inline{% endif -%}
        {%- if not (params.collection is defined and params.collection) -%}
          {{- block('containers_classes') -}}
        {%- endif -%}">
        {{- block( element ~ '_widget') -}}
        {{- form_label(form) -}}
      </div>
    {% endif %}

    {% if params.container %}
      {{ block('form_container_end') }}
    {% endif %}
  {%- endif -%}
{%- endblock checkbox_radio_row %}

{% block checkbox_row -%}
  {% set element = 'checkbox' %}
  {{- block('checkbox_radio_row') -}}
{%- endblock checkbox_row %}

{% block radio_row -%}
  {% set element = 'radio' %}
  {{- block('checkbox_radio_row') -}}
{%- endblock radio_row %}

{# multiple checkbox / radios #}
{% block choice_widget_expanded -%}

  {# the params.collection option tells to other widgets we are making a series of fields #}
  {% set params = {
      bs_custom_control: false,
      collection_container: true,
      inline: false,
      multiselect: false
    }|merge(params|default({}))|merge({
      container: false,
      top_label: false,
      collection: true
    })
  %}
  {% set inner_container_classes = '' %}
  {% if not params.collection_container %}
    {% set inner_container_classes = 'form-group' ~ block('containers_classes')  %}
  {% endif %}

  {%- if params.columns is defined and params.columns is iterable and not params.inline -%}
    {# rcolumns classes come from https://github.com/massimo-cassandro/m-utilities #}
    {% set inner_container_classes = inner_container_classes ~ ' rcolumns'  %}
    {%- for brkp, cols in params.columns -%}
      {% set inner_container_classes = inner_container_classes ~ " rcolumns-#{brkp}-#{cols}"  %}
    {%- endfor -%}
  {%- endif -%}

  {%- if params.multiselect != false -%}

    {# multiselect is not compatible with inline option #}
    {% set params = params|merge({
      inline:false}) %}

    {% set params = params|merge({multiselect:
      {
        placeholder: '&nbsp;',
        button_class: 'btn-multiselect',
        menu_class: ''
      }|merge(params.multiselect is iterable? params.multiselect : {})
    }) %}

    <div class="btn-group form-multiselect">
      <button type="button" class="btn dropdown-toggle
        {%- if params.multiselect.button_class %} {{ params.multiselect.button_class}}{% endif -%}"
        {{- ' ' -}}
        data-toggle="dropdown" data-display="static" aria-haspopup="true" aria-expanded="false">
        <span class="form-multiselect-placeholder">{{ params.multiselect.placeholder|raw }}</span>
      </button>
      <div class="dropdown-menu
        {%- if params.multiselect.menu_class %} {{ params.multiselect.menu_class}}{% endif -%}">
  {%- endif -%}

  {% set child_params = {
      translation_domain: choice_translation_domain,
      valid: valid,
      params: params
    }|merge(
      disabled is defined and disabled? {disabled:true}: {}
    )
  %}

  <div class="form-collection{%- if inner_container_classes %} {{ inner_container_classes|trim }}{% endif -%}">

    {%- for child in form %}
      {{- form_row(child, child_params ) -}}
    {% endfor -%}

  </div>

  {%- if params.multiselect != false -%}
    </div> {# /dropdown-menu #}
    </div> {# /btn-group #}
  {%- endif -%}

{%- endblock choice_widget_expanded %}

{# textarea #}
{% block textarea_widget -%}
  {% set attr = attr|merge({class: (attr.class|default('') ~ ' form-control')|trim}) %}
  {{- parent() -}}
{%- endblock textarea_widget %}
