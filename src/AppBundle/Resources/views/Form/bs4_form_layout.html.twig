{#
  Bootstrap 4 Symfony form layout
  =======================================
  Massimo Cassandro
  https://github.com/massimo-cassandro/symfony-bootstrap-form-theme
#}

{#

TODO:
custom validity
serie checkbox e radio
liste tipo multiselect
range
file
number, date, datetime, money, time
dateinterval
Switches
input groups
progress?
buttons?
validazione?
#}

{#
  estende il template form base:
  `/vendor/symfony/symfony/src/Symfony/Bridge/Twig/Resources/views/Form/form_div_layout.html.twig`
#}
{% use "form_div_layout.html.twig" %}

{# base #}
{% block form_widget_simple -%}
  {% if type is not defined or type != 'hidden' %}
    {%- set attr = attr|merge({class: (attr.class|default('') ~ ' form-control' ~ (type|default('') == 'file' ? '-file' : ''))|trim}) -%}
  {% endif %}
  {%- if type is defined and (type == 'range' or type == 'color') %}
    {# Attribute "required" is not supported #}
    {%- set required = false -%}
  {% endif %}
  {{- parent() -}}
{%- endblock form_widget_simple %}

{%- block widget_attributes -%}
  {%- if not valid %}
    {% set attr = attr|merge({class: (attr.class|default('') ~ ' is-invalid')|trim}) %}
  {% endif -%}
  {{ parent() }}
{%- endblock widget_attributes -%}


{% block form_label -%}

  {% if label is not same as(false) -%}
    {%- if compound is defined and compound -%}
      {%- set element = 'legend' -%}
      {%- set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' label')|trim}) -%}
    {%- else -%}
      {%- set label_attr = label_attr|merge({for: id}) -%}
    {%- endif -%}

 {#    {% if required -%}
      {% set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' required')|trim}) %}
    {%- endif -%} #}

    {% if label is empty -%}
      {%- if label_format is not empty -%}
        {% set label = label_format|replace({
          '%name%': name,
          '%id%': id,
        }) %}
      {%- else -%}
        {% set label = name|humanize %}
      {%- endif -%}
    {%- endif -%}
    <{{ element|default('label') }}{% if label_attr %}{% with { attr: label_attr } %}{{ block('attributes') }}{% endwith %}{% endif %}>
      {{ translation_domain is same as(false) ? label : label|trans({}, translation_domain) }}{% block form_label_errors %}{{- form_errors(form) -}}{% endblock form_label_errors %}
    </{{ element|default('label') }}>
  {%- else -%}
    {%- if errors|length > 0 -%}
    <div id="{{ id }}_errors" class="mb-2">
      {{- form_errors(form) -}}
    </div>
    {%- endif -%}
  {%- endif -%}
{%- endblock form_label %}

{# Rows #}
{% block containers_classes -%}
  {%- if disabled is defined and disabled %} disabled{%- endif -%}
  {%- if required is defined and required %} required{%- endif -%}
{%- endblock containers_classes %}

{% block form_container_start -%}
  <{{ element|default('div') }} class="form-group {{- block('containers_classes') -}}">
{%- endblock form_container_start %}

{% block form_container_end -%}
  {%- if help is defined and help|trim -%}
    <div class="form-help-text">{{ help|raw }}</div>
  {%- endif -%}
  </{{ element|default('div') }}>
{%- endblock form_container_end %}

{% block form_row -%}
  {% set params = {
      container: true,
      compound_container: true
    }|merge(params|default({}))
  %}

  {%- if compound is defined and compound and params.compound_container -%}
    {%- set element = 'fieldset' -%}
  {%- endif -%}

  {%- if params.container == true and params.compound_container == true -%}
    {{- block('form_container_start') -}}
    {{- form_label(form) -}}
  {% endif %}

   {{- form_widget(form) -}}

  {%- if params.container == true and params.compound_container == true -%}
    {{- block('form_container_end') -}}
  {%- endif -%}

{%- endblock form_row %}

{# checkboxes #}
{% block checkbox_widget -%}
  {{ parent() }}
{%- endblock checkbox_widget %}

{% block checkbox_row -%}

  {% set params = {
    container: true,
    compound_container: true,
    bs_custom_control: false,
    top_label: false
  }|merge(params|default({})) %}

  {# the `top_label` option requires the container #}
  {% if params.top_label %}
    {% set params = params|merge({container: true}) %}
  {% endif %}

{# TODO inline #}
{%- set parent_label_class = parent_label_class|default(label_attr.class|default('')) -%}


  {%- if params.bs_custom_control -%}
    {%- set attr = attr|merge({class: (attr.class|default('') ~ ' custom-control-input')|trim}) -%}
    <div class="custom-control custom-checkbox{{ 'checkbox-inline' in parent_label_class ? ' custom-control-inline' }}">
      {{- block('checkbox_widget') -}}
      {{- form_label(form, null, {label_attr: {class:'custom-control-label' ~ (disabled|default()? ' disabled' :'') }}) -}}
      {% if required %}
        <span class="required"></span>
      {% endif %}
    </div>
  {%- else -%}
    {% if params.container %}
      {{ block('form_container_start') }}
    {% endif %}

    {% if params.top_label %}
      {%- set attr = attr|merge({class: (attr.class|default('') ~ ' d-block')|trim}) -%}
      {{- form_label(form) -}}
      {{- block('checkbox_widget') -}}
    {% else %}
      {%- set attr = attr|merge({class: (attr.class|default('') ~ ' form-check-input')|trim}) -%}
      <div class="form-check
        {%- if 'checkbox-inline' in parent_label_class %} form-check-inline{% endif -%}
        {%- if not (params.compound is defined and params.compound) -%}
          {{- block('containers_classes') -}}
        {%- endif -%}">
        {{- block('checkbox_widget') -}}
        {{- form_label(form) -}}
      </div>
    {% endif %}

    {% if params.container %}
      {{ block('form_container_end') }}
    {% endif %}
  {%- endif -%}
{%- endblock checkbox_row %}

{# multiple checkbox #}
{% block choice_widget_expanded -%}

  {% set params = {
      bs_custom_control: false,
      compound_container: true,
    }|merge(params|default({}))|merge({
      container: false,
      top_label: false,
      compound: true
    })
  %}

  {% set inner_container_classes = '' %}
  {% if not params.compound_container %}
    {% set inner_container_classes = 'form-group' ~ block('containers_classes')  %}
  {% endif %}

  {%- if params.columns is defined and params.columns is iterable -%}
    {% set inner_container_classes = inner_container_classes ~ ' rcolumns'  %}
    {%- for brkp, cols in params.columns -%}
      {% set inner_container_classes = inner_container_classes ~ " rcolumns-#{brkp}-#{cols}"  %}
    {%- endfor -%}
  {%- endif -%}

  <div class="form-collection{%- if inner_container_classes %} {{ inner_container_classes|trim }}{% endif -%}">

    {%- for child in form %}
      {{- form_row(child, {
        parent_label_class: label_attr.class|default(''),
        translation_domain: choice_translation_domain,
        valid: valid,
        params: params
      }|merge(disabled is defined and disabled? {disabled:true}: {})) -}}
    {% endfor -%}

  </div>

{#     {% if '-inline' in label_attr.class|default('') -%}
      {%- for child in form %}
        {{- form_row(child, {
          parent_label_class: label_attr.class|default(''),
          translation_domain: choice_translation_domain,
          valid: valid,
          params: params
        }) -}}
      {% endfor -%}
    {%- else -%}
      {%- if not valid -%}
        {%- set attr = attr|merge({class: (attr.class|default('') ~ ' form-control is-invalid')|trim}) %}
      {%- endif -%}
      {%- for child in form %}
        {{- form_row(child, {
          parent_label_class: label_attr.class|default(''),
          translation_domain: choice_translation_domain,
          valid: true,
          params: params
        }) -}}
      {% endfor -%}

    {%- endif %} #}


{%- endblock choice_widget_expanded %}

{# textarea #}
{% block textarea_widget -%}
  {% set attr = attr|merge({class: (attr.class|default('') ~ ' form-control')|trim}) %}
  {{- parent() -}}
{%- endblock textarea_widget %}
